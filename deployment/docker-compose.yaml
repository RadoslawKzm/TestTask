services:
  backend:
    container_name: backend
    build:
      context: ../.
      dockerfile: deployment/dockerfiles/backend.dockerfile
      args:
        APP_FOLDER: backend
        VIRTUAL_ENV_PATH: /opt/venv
        ENTRYPOINT_PATH: /deployment/entrypoints/backend_entrypoint.sh
    environment:
      VIRTUAL_ENV_PATH: /opt/venv
      APP_PORT: ${FASTAPI_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - '${FASTAPI_PORT}:${FASTAPI_PORT}' # HOST_MACHINE:DOCKER_CONTAINER
    volumes:
      - ../backend:/backend
    restart: always
    entrypoint:
      - /deployment/entrypoints/backend_entrypoint.sh
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:8765/api/health/ || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
#    stdin_open: true # docker run -i
#    tty: true        # docker run -t

  postgres-db:
    image: postgres:17
    container_name: postgres-db
    restart: always
    env_file: .env  # Load environment variables from the .env file
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge

